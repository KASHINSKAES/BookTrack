import 'dart:math';
import 'package:booktrack/auth_service.dart';
import 'package:booktrack/database_service.dart';
import 'package:booktrack/models/userModels.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:phone_form_field/phone_form_field.dart';
import 'package:pinput/pinput.dart';

class AuthScreen extends StatefulWidget {
  const AuthScreen({super.key});

  @override
  State<AuthScreen> createState() => _AuthScreenState();
}

class _AuthScreenState extends State<AuthScreen>
    with SingleTickerProviderStateMixin {
  // 1. КОНТРОЛЛЕРЫ И НАСТРОЙКИ ============================================
  late TabController _tabController;
  final _formKey = GlobalKey<FormState>();

  // Контроллеры для ввода данных
  final _emailController = TextEditingController();
  final _phoneController = PhoneController(null);
  final _passwordController = TextEditingController();
  final _nameController = TextEditingController();
  final _surnameController = TextEditingController();
  final _birthDateController = TextEditingController();
  final _codeController = TextEditingController();

  // 2. СОСТОЯНИЕ ПРИЛОЖЕНИЯ ==============================================
  String? _verificationId;
  bool _isCodeSent = false;
  bool _isEmailAuth = true;
  bool _isRegistering = false;
  bool _usePassword = false;
  DateTime? _selectedDate;
  String? _generatedCode; // Генерируемый код для проверки
  String? _selectedRegion = 'RU';

  // 3. СЕРВИСЫ ===========================================================
  final AuthService _authService = AuthService();
  final DatabaseService _databaseService = DatabaseService();

  // 4. ИНИЦИАЛИЗАЦИЯ И ОЧИСТКА ===========================================
  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    _initFirebaseSettings();
  }

  /// Настройка параметров Firebase
  void _initFirebaseSettings() {
    if (kIsWeb) {
      SystemChrome.setPreferredOrientations([
        DeviceOrientation.portraitUp,
      ]);
    }
  }

  @override
  void dispose() {
    _tabController.dispose();
    _emailController.dispose();
    _phoneController.dispose();
    _passwordController.dispose();
    _codeController.dispose();
    _nameController.dispose();
    _surnameController.dispose();
    _birthDateController.dispose();
    super.dispose();
  }

  // 5. МЕТОДЫ ГЕНЕРАЦИИ И ПРОВЕРКИ КОДОВ =================================

  /// Генерация 6-значного кода
  String _generate6DigitCode() {
    final code = (100000 + Random().nextInt(900000)).toString();
    print('Сгенерирован код: $code');
    return code;
  }

  /// Проверка введенного кода
  bool _verifyUserCode(String inputCode) {
    final isValid = _generatedCode == inputCode;
    print(
        'Проверка кода: $inputCode, ожидаемый: $_generatedCode, результат: $isValid');
    return isValid;
  }

  // 6. МЕТОДЫ АУТЕНТИФИКАЦИИ ============================================

  /// Отправка кода на email
  Future<void> _sendEmailCode() async {
    if (!_formKey.currentState!.validate()) return;

    try {
      _generatedCode = _generate6DigitCode();

      setState(() {
        _isCodeSent = true;
        _isEmailAuth = true;
        _usePassword = false;
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Код отправлен на ${_emailController.text}')),
      );
    } catch (e) {
      _handleAuthError(e);
    }
  }

  /// Отправка кода на телефон
  Future<void> _sendPhoneCode() async {
    if (!_formKey.currentState!.validate()) return;
    if (_phoneController.value == null) return;

    try {
      _generatedCode = _generate6DigitCode();

      await FirebaseAuth.instance.verifyPhoneNumber(
        phoneNumber: _phoneController.value!.international,
        verificationCompleted: (credential) async {
          await _handleVerificationCompleted(credential);
        },
        verificationFailed: (error) {
          _handleVerificationFailed(error);
        },
        codeSent: (verificationId, resendToken) {
          _handleCodeSent(verificationId);
        },
        codeAutoRetrievalTimeout: (verificationId) {},
      );
    } catch (e) {
      _handleAuthError(e);
    }
  }

  /// Вход по паролю для email
  Future<void> _signInWithPassword() async {
    if (!_formKey.currentState!.validate()) return;

    try {
      final user = await _authService.signInWithEmailAndPassword(
        _emailController.text,
        _passwordController.text,
      );
      if (user != null) {
        await _checkUserExists(user.uid);
      }
    } catch (e) {
      _handleAuthError(e);
    }
  }

  /// Вход по паролю для телефона
  Future<void> _signInWithPhonePassword() async {
    if (!_formKey.currentState!.validate()) return;

    try {
      // В реальном приложении здесь должна быть проверка пароля для телефона
      // Для демо просто проверяем существование пользователя
      await _checkUserExists(FirebaseAuth.instance.currentUser?.uid);
    } catch (e) {
      _handleAuthError(e);
    }
  }

  /// Проверка кода подтверждения
  Future<void> _verifyCode() async {
    if (_codeController.text.isEmpty) return;

    try {
      if (_isEmailAuth) {
        if (_verifyUserCode(_codeController.text)) {
          await _checkUserExists(FirebaseAuth.instance.currentUser?.uid);
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Неверный код подтверждения')),
          );
        }
      } else {
        final credential = PhoneAuthProvider.credential(
          verificationId: _verificationId!,
          smsCode: _codeController.text,
        );
        await FirebaseAuth.instance.signInWithCredential(credential);
        await _checkUserExists(FirebaseAuth.instance.currentUser?.uid);
      }
    } catch (e) {
      _handleAuthError(e);
    }
  }

  // 7. ОБРАБОТЧИКИ СОБЫТИЙ ==============================================

  Future<void> _handleVerificationCompleted(
      PhoneAuthCredential credential) async {
    try {
      await FirebaseAuth.instance.signInWithCredential(credential);
      await _checkUserExists(FirebaseAuth.instance.currentUser?.uid);
    } catch (e) {
      _handleAuthError(e);
    }
  }

  void _handleVerificationFailed(FirebaseAuthException error) {
    print('Ошибка верификации: ${error.message}');

    if (error.code == 'sms-region-unsupported') {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
            content: Text('Отправка SMS недоступна для вашего региона')),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Ошибка верификации: ${error.message}')),
      );
    }
  }

  void _handleCodeSent(String verificationId) {
    setState(() {
      _verificationId = verificationId;
      _isCodeSent = true;
      _isEmailAuth = false;
      _usePassword = false;
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Код отправлен на ваш телефон: $_generatedCode')),
    );
  }

  Future<void> _checkUserExists(String? uid) async {
    if (uid == null) return;

    try {
      final exists = await _databaseService.checkUserExists(uid);
      if (exists) {
        Navigator.pushReplacementNamed(context, '/home');
      } else {
        setState(() => _isRegistering = true);
      }
    } catch (e) {
      _handleAuthError(e);
    }
  }

  void _handleAuthError(dynamic error) {
    print('Ошибка аутентификации: $error');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Ошибка: ${error.toString()}')),
    );
  }

  // 8. МЕТОДЫ РЕГИСТРАЦИИ ===============================================

  Future<void> _registerUser() async {
    if (!_formKey.currentState!.validate()) return;

    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    final newUser = UserModel(
      uid: user.uid,
      name: _nameController.text,
      subname: _surnameController.text,
      email: _emailController.text,
      phone: _phoneController.value?.international,
      password: _passwordController.text,
      birthDate: _selectedDate,
    );

    try {
      await _databaseService.createUser(newUser);
      Navigator.pushReplacementNamed(context, '/home');
    } catch (e) {
      _handleAuthError(e);
    }
  }

  Future<void> _selectDate(BuildContext context) async {
    final picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(1900),
      lastDate: DateTime.now(),
    );

    if (picked != null && picked != _selectedDate) {
      setState(() {
        _selectedDate = picked;
        _birthDateController.text =
            '${picked.day}.${picked.month}.${picked.year}';
      });
    }
  }

  // 9. ВИДЖЕТЫ ==========================================================

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: CustomScrollView(
        physics: const ClampingScrollPhysics(),
        slivers: [
          _buildAppBar(),
          _buildTabBar(),
          SliverToBoxAdapter(
            child: SizedBox(
              height: MediaQuery.of(context).size.height * 0.7,
              child: TabBarView(
                controller: _tabController,
                children: [
                  _isRegistering
                      ? _buildRegistrationForm()
                      : _isCodeSent
                          ? _buildCodeVerification()
                          : _buildEmailTab(),
                  _isRegistering
                      ? _buildRegistrationForm()
                      : _isCodeSent
                          ? _buildCodeVerification()
                          : _buildPhoneTab(),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  SliverAppBar _buildAppBar() {
    return SliverAppBar(
      title: const Text('Вход в приложение'),
      pinned: true,
      expandedHeight: 100,
      flexibleSpace: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.blue.shade700, Colors.blue.shade400],
          ),
        ),
      ),
    );
  }

  SliverPersistentHeader _buildTabBar() {
    return SliverPersistentHeader(
      pinned: true,
      delegate: _SliverAppBarDelegate(
        TabBar(
          controller: _tabController,
          tabs: const [
            Tab(text: 'По почте'),
            Tab(text: 'По телефону'),
          ],
          labelColor: Colors.black,
          unselectedLabelColor: Colors.grey,
          indicator: BoxDecoration(
            border: Border(
              bottom: BorderSide(
                color: Colors.blue.shade700,
                width: 3,
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildEmailTab() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Form(
        key: _formKey,
        child: Column(
          children: [
            TextFormField(
              controller: _emailController,
              decoration: const InputDecoration(
                labelText: 'Email',
                prefixIcon: Icon(Icons.email),
              ),
              validator: (value) {
                if (value == null || value.isEmpty) return 'Введите email';
                if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$')
                    .hasMatch(value)) {
                  return 'Введите корректный email';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {
                      setState(() => _usePassword = !_usePassword);
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.grey.shade200,
                      foregroundColor: Colors.black,
                    ),
                    child: Text(_usePassword
                        ? 'Использовать код'
                        : 'Использовать пароль'),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            if (_usePassword) ...[
              TextFormField(
                controller: _passwordController,
                decoration: const InputDecoration(
                  labelText: 'Пароль',
                  prefixIcon: Icon(Icons.lock),
                ),
                obscureText: true,
                validator: (value) =>
                    value?.isEmpty ?? true ? 'Введите пароль' : null,
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: _signInWithPassword,
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(double.infinity, 50),
                ),
                child: const Text('Войти'),
              ),
            ] else ...[
              ElevatedButton(
                onPressed: _sendEmailCode,
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(double.infinity, 50),
                ),
                child: const Text('Получить код'),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildPhoneTab() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Form(
        key: _formKey,
        child: Column(
          children: [
            PhoneFormField(
              controller: _phoneController,
              shouldFormat: true,
              defaultCountry: 'RU',
              decoration: const InputDecoration(
                labelText: 'Номер телефона',
                prefixIcon: Icon(Icons.phone),
              ),
              validator: PhoneValidator.compose([
                PhoneValidator.required(),
                PhoneValidator.validMobile(),
              ]),
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {
                      setState(() => _usePassword = !_usePassword);
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.grey.shade200,
                      foregroundColor: Colors.black,
                    ),
                    child: Text(_usePassword
                        ? 'Использовать код'
                        : 'Использовать пароль'),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            if (_usePassword) ...[
              TextFormField(
                controller: _passwordController,
                decoration: const InputDecoration(
                  labelText: 'Пароль',
                  prefixIcon: Icon(Icons.lock),
                ),
                obscureText: true,
                validator: (value) =>
                    value?.isEmpty ?? true ? 'Введите пароль' : null,
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: _signInWithPhonePassword,
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(double.infinity, 50),
                ),
                child: const Text('Войти'),
              ),
            ] else ...[
              ElevatedButton(
                onPressed: _sendPhoneCode,
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(double.infinity, 50),
                ),
                child: const Text('Получить код'),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildCodeVerification() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        children: [
          Text(
            'Введите 6-значный код, отправленный на ${_isEmailAuth ? _emailController.text : "ваш телефон"}',
            style: Theme.of(context).textTheme.titleMedium,
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 24),
          Pinput(
            length: 6,
            controller: _codeController,
            defaultPinTheme: PinTheme(
              width: 56,
              height: 56,
              textStyle: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.w600,
              ),
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey.shade400),
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            onCompleted: (code) => _verifyCode(),
          ),
          const SizedBox(height: 24),
          ElevatedButton(
            onPressed: _verifyCode,
            style: ElevatedButton.styleFrom(
              minimumSize: const Size(double.infinity, 50),
            ),
            child: const Text('Подтвердить'),
          ),
          const SizedBox(height: 16),
          TextButton(
            onPressed: () {
              setState(() {
                _isCodeSent = false;
                _codeController.clear();
              });
            },
            child: const Text('Изменить email/телефон'),
          ),
          if (_generatedCode != null) ...[
            const SizedBox(height: 16),
            Text(
              'Тестовый код: $_generatedCode',
              style: TextStyle(color: Colors.grey.shade600),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildRegistrationForm() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            children: [
              const Text(
                'Завершите регистрацию',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 24),
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: 'Имя',
                  prefixIcon: Icon(Icons.person),
                ),
                validator: (value) =>
                    value?.isEmpty ?? true ? 'Введите имя' : null,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _surnameController,
                decoration: const InputDecoration(
                  labelText: 'Фамилия',
                  prefixIcon: Icon(Icons.person_outline),
                ),
                validator: (value) =>
                    value?.isEmpty ?? true ? 'Введите фамилию' : null,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _emailController,
                decoration: const InputDecoration(
                  labelText: 'Email',
                  prefixIcon: Icon(Icons.email),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) return 'Введите email';
                  if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$')
                      .hasMatch(value)) {
                    return 'Введите корректный email';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _birthDateController,
                decoration: const InputDecoration(
                  labelText: 'Дата рождения',
                  prefixIcon: Icon(Icons.calendar_today),
                ),
                readOnly: true,
                onTap: () => _selectDate(context),
                validator: (value) =>
                    value?.isEmpty ?? true ? 'Введите дату рождения' : null,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _passwordController,
                decoration: const InputDecoration(
                  labelText: 'Пароль',
                  prefixIcon: Icon(Icons.lock),
                ),
                obscureText: true,
                validator: (value) {
                  if (value == null || value.isEmpty) return 'Введите пароль';
                  if (value.length < 6)
                    return 'Пароль должен быть не менее 6 символов';
                  return null;
                },
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: _registerUser,
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(double.infinity, 50),
                ),
                child: const Text('Зарегистрироваться'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class _SliverAppBarDelegate extends SliverPersistentHeaderDelegate {
  final TabBar _tabBar;

  _SliverAppBarDelegate(this._tabBar);

  @override
  double get minExtent => _tabBar.preferredSize.height;
  @override
  double get maxExtent => _tabBar.preferredSize.height;

  @override
  Widget build(
      BuildContext context, double shrinkOffset, bool overlapsContent) {
    return Container(
      color: Colors.white,
      child: _tabBar,
    );
  }

  @override
  bool shouldRebuild(_SliverAppBarDelegate oldDelegate) => false;
}
